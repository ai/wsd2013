- title 'Плохие препроцессоры'

pre
  code @import "shared";
  code $default-transition-property: all !default;
  code $default-transition-duration: 1s !default;
  code $default-transition-function: false !default;
  code $default-transition-delay: false !default;
  code $transitionable-prefixed-values: transform, transform-origin !default;
  code @mixin transition-property($property-1: $default-transition-property, $property-2 : false, $property-3 : false, $property-4 : false, $property-5 : false, $property-6 : false, $property-7 : false, $property-8 : false, $property-9 : false, $property-10: false
  code ) {
  code   @if type-of($property-1) == string { $property-1: unquote($property-1); }
  code   $properties: compact($property-1, $property-2, $property-3, $property-4, $property-5, $property-6, $property-7, $property-8, $property-9, $property-10);
  code   @if $experimental-support-for-webkit    {       -webkit-transition-property : prefixed-for-transition(-webkit, $properties); }
  code   @if $experimental-support-for-mozilla   {          -moz-transition-property : prefixed-for-transition(-moz,    $properties); }
  code   @if $experimental-support-for-opera     {            -o-transition-property : prefixed-for-transition(-o,      $properties); }
  code                                                           transition-property : $properties;
  code }
  code @mixin transition-duration($duration-1: $default-transition-duration, $duration-2 : false, $duration-3 : false, $duration-4 : false, $duration-5 : false, $duration-6 : false, $duration-7 : false, $duration-8 : false, $duration-9 : false, $duration-10: false
  code ) {
  code   @if type-of($duration-1) == string { $duration-1: unquote($duration-1); }
  code   $durations: compact($duration-1, $duration-2, $duration-3, $duration-4, $duration-5, $duration-6, $duration-7, $duration-8, $duration-9, $duration-10);
  code   @include experimental(transition-duration, $durations,
  code     -moz, -webkit, -o, not -ms, not -khtml, official
  code   );
  code }
  code @mixin transition-timing-function($function-1: $default-transition-function, $function-2 : false, $function-3 : false, $function-4 : false, $function-5 : false, $function-6 : false, $function-7 : false, $function-8 : false, $function-9 : false, $function-10: false
  code ) {
  code   $function-1: unquote($function-1);
  code   $functions: compact($function-1, $function-2, $function-3, $function-4, $function-5, $function-6, $function-7, $function-8, $function-9, $function-10);
  code   @include experimental(transition-timing-function, $functions,
  code     -moz, -webkit, -o, not -ms, not -khtml, official
  code   );
  code }
  code @mixin transition-delay($delay-1: $default-transition-delay, $delay-2 : false, $delay-3 : false, $delay-4 : false, $delay-5 : false, $delay-6 : false, $delay-7 : false, $delay-8 : false, $delay-9 : false, $delay-10: false
  code ) {
  code   @if type-of($delay-1) == string { $delay-1: unquote($delay-1); }
  code   $delays: compact($delay-1, $delay-2, $delay-3, $delay-4, $delay-5, $delay-6, $delay-7, $delay-8, $delay-9, $delay-10);
  code   @include experimental(transition-delay, $delays,
  code     -moz, -webkit, -o, not -ms, not -khtml, official
  code   );
  code }
  code @mixin single-transition(
  code   $property: $default-transition-property,
  code   $duration: $default-transition-duration,
  code   $function: $default-transition-function,
  code   $delay: $default-transition-delay
  code ) {
  code   @include transition(compact($property $duration $function $delay));
  code }
  code @mixin transition(
  code   $transition-1 : default, $transition-2 : false, $transition-3 : false, $transition-4 : false, $transition-5 : false, $transition-6 : false, $transition-7 : false, $transition-8 : false, $transition-9 : false, $transition-10: false
  code ) {
  code   @if $transition-1 == default {
  code     $transition-1 : compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay);
  code   }
  code   $transitions: false;
  code   @if type-of($transition-1) == list and type-of(nth($transition-1,1)) == list {
  code     $transitions: join($transition-1, compact($transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10), comma);
  code   } @else {
  code     $transitions : compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10);
  code   }
  code   $delays: comma-list();
  code   $has-delays: false;
  code   $webkit-value: comma-list();
  code   $moz-value: comma-list();
  code   $o-value: comma-list();
  code   @each $transition in $transitions {
  code     $property: nth($transition, 1);
  code     $duration: false;
  code     $timing-function: false;
  code     $delay: false;
  code     @if length($transition) > 1 { $duration:        nth($transition, 2); }
  code     @if length($transition) > 2 { $timing-function: nth($transition, 3); }
  code     @if length($transition) > 3 { $delay:           nth($transition, 4); $has-delays: true; }
  code     @if is-time($timing-function) and not $delay { $delay: $timing-function; $timing-function: false; $has-delays: true; }
  code     $delays: append($delays, if($delay, $delay, 0s));
  code     $webkit-value: append($webkit-value, compact(prefixed-for-transition(-webkit, $property) $duration $timing-function));
  code        $moz-value: append(   $moz-value, compact(prefixed-for-transition(   -moz, $property) $duration $timing-function $delay));
  code          $o-value: append(     $o-value, compact(prefixed-for-transition(     -o, $property) $duration $timing-function $delay));
  code   }
  code   @if $experimental-support-for-webkit    {       -webkit-transition : $webkit-value;
  code     @if $has-delays                       { -webkit-transition-delay : $delays;       } }
  code   @if $experimental-support-for-mozilla   {          -moz-transition : $moz-value;    }
  code   @if $experimental-support-for-opera     {            -o-transition : $o-value;      }
  code                                                           transition : $transitions;
  code }
  code @function comma-list($list: ()) {
  code   @return join((), $list, comma);
  code }
  code @function prefixed-for-transition($prefix, $property) {
  code   @if type-of($property) == list {
  code     $new-list: comma-list();
  code     @each $v in $property {
  code       $new-list: append($new-list, prefixed-for-transition($prefix, $v));
  code     }
  code     @return $new-list;
  code   } @else {
  code     @if index($transitionable-prefixed-values, $property) {
  code       @return #{$prefix}-#{$property};
  code     } @else {
  code       @return $property;
  code     }
  code   }
  code }
  code @function is-time($value) {
  code   @if type-of($value) == number {
  code     @return not not index(s ms, unit($value));
  code   } @else {
  code     @return false;
  code   }
  code }
